import { Transport, TransportRequestOptions } from '@elastic/transport';
import * as T from './types';
interface That {
    transport: Transport;
}
export default class API {
    getHealth(this: That, params?: T.GetHealthRequest, options?: TransportRequestOptions): Promise<T.GetHealthResponse>;
    getReadOnly(this: That, params?: T.GetReadOnlyRequest, options?: TransportRequestOptions): Promise<T.GetReadOnlyResponse>;
    putReadOnly(this: That, params: T.PutReadOnlyRequest, options?: TransportRequestOptions): Promise<T.PutReadOnlyResponse>;
    getStats(this: That, params?: T.GetStatsRequest, options?: TransportRequestOptions): Promise<T.GetStatsResponse>;
    getStorage(this: That, params?: T.GetStorageRequest, options?: TransportRequestOptions): Promise<T.GetStorageResponse>;
    getStaleStorage(this: That, params?: T.GetStaleStorageRequest, options?: TransportRequestOptions): Promise<T.GetStaleStorageResponse>;
    deleteStaleStorage(this: That, params?: T.DeleteStaleStorageRequest, options?: TransportRequestOptions): Promise<T.DeleteStaleStorageResponse>;
    getVersion(this: That, params?: T.GetVersionRequest, options?: TransportRequestOptions): Promise<T.GetVersionResponse>;
}
export {};
