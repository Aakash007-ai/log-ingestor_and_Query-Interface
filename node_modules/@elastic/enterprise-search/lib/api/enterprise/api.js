"use strict";
/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
class API {
    async getHealth(params, options) {
        return await this.transport.request({
            method: 'GET',
            path: '/api/ent/v1/internal/health'
        }, options);
    }
    async getReadOnly(params, options) {
        return await this.transport.request({
            method: 'GET',
            path: '/api/ent/v1/internal/read_only_mode'
        }, options);
    }
    async putReadOnly(params, options) {
        const { body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'PUT',
            path: '/api/ent/v1/internal/read_only_mode',
            querystring,
            body: body
        }, options);
    }
    async getStats(params, options) {
        const { ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: '/api/ent/v1/internal/stats',
            querystring
        }, options);
    }
    async getStorage(params, options) {
        return await this.transport.request({
            method: 'GET',
            path: '/api/ent/v1/internal/storage'
        }, options);
    }
    async getStaleStorage(params, options) {
        return await this.transport.request({
            method: 'GET',
            path: '/api/ent/v1/internal/storage/stale'
        }, options);
    }
    async deleteStaleStorage(params, options) {
        const { ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'DELETE',
            path: '/api/ent/v1/internal/storage/stale',
            querystring
        }, options);
    }
    async getVersion(params, options) {
        return await this.transport.request({
            method: 'GET',
            path: '/api/ent/v1/internal/version'
        }, options);
    }
}
exports.default = API;
//# sourceMappingURL=api.js.map