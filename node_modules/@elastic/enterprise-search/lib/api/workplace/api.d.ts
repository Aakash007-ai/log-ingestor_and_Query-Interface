import { Transport, TransportRequestOptions } from '@elastic/transport';
import * as T from './types';
interface That {
    transport: Transport;
}
export default class API {
    createContentSource(this: That, params: T.CreateContentSourceRequest, options?: TransportRequestOptions): Promise<T.CreateContentSourceResponse>;
    listContentSources(this: That, params?: T.ListContentSourcesRequest, options?: TransportRequestOptions): Promise<T.ListContentSourcesResponse>;
    getContentSource(this: That, params: T.GetContentSourceRequest, options?: TransportRequestOptions): Promise<T.GetContentSourceResponse>;
    putContentSource(this: That, params: T.PutContentSourceRequest, options?: TransportRequestOptions): Promise<T.PutContentSourceResponse>;
    deleteContentSource(this: That, params: T.DeleteContentSourceRequest, options?: TransportRequestOptions): Promise<T.DeleteContentSourceResponse>;
    putContentSourceIcons(this: That, params: T.PutContentSourceIconsRequest, options?: TransportRequestOptions): Promise<T.PutContentSourceIconsResponse>;
    deleteDocumentsByQuery(this: That, params: T.DeleteDocumentsByQueryRequest, options?: TransportRequestOptions): Promise<T.DeleteDocumentsByQueryResponse>;
    listDocuments(this: That, params: T.ListDocumentsRequest, options?: TransportRequestOptions): Promise<T.ListDocumentsResponse>;
    indexDocuments(this: That, params: T.IndexDocumentsRequest, options?: TransportRequestOptions): Promise<T.IndexDocumentsResponse>;
    deleteDocuments(this: That, params: T.DeleteDocumentsRequest, options?: TransportRequestOptions): Promise<T.DeleteDocumentsResponse>;
    getDocument(this: That, params: T.GetDocumentRequest, options?: TransportRequestOptions): Promise<T.GetDocumentResponse>;
    listExternalIdentities(this: That, params: T.ListExternalIdentitiesRequest, options?: TransportRequestOptions): Promise<T.ListExternalIdentitiesResponse>;
    createExternalIdentity(this: That, params: T.CreateExternalIdentityRequest, options?: TransportRequestOptions): Promise<T.CreateExternalIdentityResponse>;
    getExternalIdentity(this: That, params: T.GetExternalIdentityRequest, options?: TransportRequestOptions): Promise<T.GetExternalIdentityResponse>;
    putExternalIdentity(this: That, params: T.PutExternalIdentityRequest, options?: TransportRequestOptions): Promise<T.PutExternalIdentityResponse>;
    deleteExternalIdentity(this: That, params: T.DeleteExternalIdentityRequest, options?: TransportRequestOptions): Promise<T.DeleteExternalIdentityResponse>;
    commandSyncJobs(this: That, params: T.CommandSyncJobsRequest, options?: TransportRequestOptions): Promise<T.CommandSyncJobsResponse>;
    getSynonymSet(this: That, params: T.GetSynonymSetRequest, options?: TransportRequestOptions): Promise<T.GetSynonymSetResponse>;
    putSynonymSet(this: That, params: T.PutSynonymSetRequest, options?: TransportRequestOptions): Promise<T.PutSynonymSetResponse>;
    deleteSynonymSet(this: That, params: T.DeleteSynonymSetRequest, options?: TransportRequestOptions): Promise<T.DeleteSynonymSetResponse>;
    listSynonymSets(this: That, params?: T.ListSynonymSetsRequest, options?: TransportRequestOptions): Promise<T.ListSynonymSetsResponse>;
    createBatchSynonymSets(this: That, params: T.CreateBatchSynonymSetsRequest, options?: TransportRequestOptions): Promise<T.CreateBatchSynonymSetsResponse>;
    getTriggersBlocklist(this: That, params?: T.GetTriggersBlocklistRequest, options?: TransportRequestOptions): Promise<T.GetTriggersBlocklistResponse>;
    putTriggersBlocklist(this: That, params?: T.PutTriggersBlocklistRequest, options?: TransportRequestOptions): Promise<T.PutTriggersBlocklistResponse>;
    getAutoQueryRefinementDetails(this: That, params: T.GetAutoQueryRefinementDetailsRequest, options?: TransportRequestOptions): Promise<T.GetAutoQueryRefinementDetailsResponse>;
    getCurrentUser(this: That, params?: T.GetCurrentUserRequest, options?: TransportRequestOptions): Promise<T.GetCurrentUserResponse>;
    createAnalyticsEvent(this: That, params: T.CreateAnalyticsEventRequest, options?: TransportRequestOptions): Promise<T.CreateAnalyticsEventResponse>;
    search(this: That, params: T.SearchRequest, options?: TransportRequestOptions): Promise<T.SearchResponse>;
}
export {};
