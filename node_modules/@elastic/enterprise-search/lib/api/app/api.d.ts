import { Transport, TransportRequestOptions } from '@elastic/transport';
import * as T from './types';
interface That {
    transport: Transport;
}
export default class API {
    getAdaptiveRelevanceSettings(this: That, params: T.GetAdaptiveRelevanceSettingsRequest, options?: TransportRequestOptions): Promise<T.GetAdaptiveRelevanceSettingsResponse>;
    putAdaptiveRelevanceSettings(this: That, params: T.PutAdaptiveRelevanceSettingsRequest, options?: TransportRequestOptions): Promise<T.PutAdaptiveRelevanceSettingsResponse>;
    listAdaptiveRelevanceSuggestions(this: That, params: T.ListAdaptiveRelevanceSuggestionsRequest, options?: TransportRequestOptions): Promise<T.ListAdaptiveRelevanceSuggestionsResponse>;
    putAdaptiveRelevanceSuggestions(this: That, params: T.PutAdaptiveRelevanceSuggestionsRequest, options?: TransportRequestOptions): Promise<T.PutAdaptiveRelevanceSuggestionsResponse>;
    getAdaptiveRelevanceSuggestions(this: That, params: T.GetAdaptiveRelevanceSuggestionsRequest, options?: TransportRequestOptions): Promise<T.GetAdaptiveRelevanceSuggestionsResponse>;
    refreshAdaptiveRelevanceUpdateProcess(this: That, params: T.RefreshAdaptiveRelevanceUpdateProcessRequest, options?: TransportRequestOptions): Promise<T.RefreshAdaptiveRelevanceUpdateProcessResponse>;
    getTopClicksAnalytics(this: That, params: T.GetTopClicksAnalyticsRequest, options?: TransportRequestOptions): Promise<T.GetTopClicksAnalyticsResponse>;
    getCountAnalytics(this: That, params: T.GetCountAnalyticsRequest, options?: TransportRequestOptions): Promise<T.GetCountAnalyticsResponse>;
    getTopQueriesAnalytics(this: That, params: T.GetTopQueriesAnalyticsRequest, options?: TransportRequestOptions): Promise<T.GetTopQueriesAnalyticsResponse>;
    logClickthrough(this: That, params: T.LogClickthroughRequest, options?: TransportRequestOptions): Promise<T.LogClickthroughResponse>;
    getCrawlerUrlExtractionResult(this: That, params: T.GetCrawlerUrlExtractionResultRequest, options?: TransportRequestOptions): Promise<T.GetCrawlerUrlExtractionResultResponse>;
    createCrawlerCrawlRequest(this: That, params: T.CreateCrawlerCrawlRequestRequest, options?: TransportRequestOptions): Promise<T.CreateCrawlerCrawlRequestResponse>;
    listCrawlerCrawlRequests(this: That, params: T.ListCrawlerCrawlRequestsRequest, options?: TransportRequestOptions): Promise<T.ListCrawlerCrawlRequestsResponse>;
    getCrawlerCrawlRequest(this: That, params: T.GetCrawlerCrawlRequestRequest, options?: TransportRequestOptions): Promise<T.GetCrawlerCrawlRequestResponse>;
    getCrawlerActiveCrawlRequest(this: That, params: T.GetCrawlerActiveCrawlRequestRequest, options?: TransportRequestOptions): Promise<T.GetCrawlerActiveCrawlRequestResponse>;
    deleteCrawlerActiveCrawlRequest(this: That, params: T.DeleteCrawlerActiveCrawlRequestRequest, options?: TransportRequestOptions): Promise<T.DeleteCrawlerActiveCrawlRequestResponse>;
    createCrawlerCrawlRule(this: That, params: T.CreateCrawlerCrawlRuleRequest, options?: TransportRequestOptions): Promise<T.CreateCrawlerCrawlRuleResponse>;
    putCrawlerCrawlRule(this: That, params: T.PutCrawlerCrawlRuleRequest, options?: TransportRequestOptions): Promise<T.PutCrawlerCrawlRuleResponse>;
    deleteCrawlerCrawlRule(this: That, params: T.DeleteCrawlerCrawlRuleRequest, options?: TransportRequestOptions): Promise<T.DeleteCrawlerCrawlRuleResponse>;
    getCrawlerCrawlSchedule(this: That, params: T.GetCrawlerCrawlScheduleRequest, options?: TransportRequestOptions): Promise<T.GetCrawlerCrawlScheduleResponse>;
    putCrawlerCrawlSchedule(this: That, params: T.PutCrawlerCrawlScheduleRequest, options?: TransportRequestOptions): Promise<T.PutCrawlerCrawlScheduleResponse>;
    deleteCrawlerCrawlSchedule(this: That, params: T.DeleteCrawlerCrawlScheduleRequest, options?: TransportRequestOptions): Promise<T.DeleteCrawlerCrawlScheduleResponse>;
    getCrawlerProcessCrawlDeniedUrls(this: That, params: T.GetCrawlerProcessCrawlDeniedUrlsRequest, options?: TransportRequestOptions): Promise<T.GetCrawlerProcessCrawlDeniedUrlsResponse>;
    listCrawlerDomains(this: That, params: T.ListCrawlerDomainsRequest, options?: TransportRequestOptions): Promise<T.ListCrawlerDomainsResponse>;
    createCrawlerDomain(this: That, params: T.CreateCrawlerDomainRequest, options?: TransportRequestOptions): Promise<T.CreateCrawlerDomainResponse>;
    getCrawlerDomain(this: That, params: T.GetCrawlerDomainRequest, options?: TransportRequestOptions): Promise<T.GetCrawlerDomainResponse>;
    putCrawlerDomain(this: That, params: T.PutCrawlerDomainRequest, options?: TransportRequestOptions): Promise<T.PutCrawlerDomainResponse>;
    deleteCrawlerDomain(this: That, params: T.DeleteCrawlerDomainRequest, options?: TransportRequestOptions): Promise<T.DeleteCrawlerDomainResponse>;
    createCrawlerEntryPoint(this: That, params: T.CreateCrawlerEntryPointRequest, options?: TransportRequestOptions): Promise<T.CreateCrawlerEntryPointResponse>;
    putCrawlerEntryPoint(this: That, params: T.PutCrawlerEntryPointRequest, options?: TransportRequestOptions): Promise<T.PutCrawlerEntryPointResponse>;
    deleteCrawlerEntryPoint(this: That, params: T.DeleteCrawlerEntryPointRequest, options?: TransportRequestOptions): Promise<T.DeleteCrawlerEntryPointResponse>;
    getCrawlerMetrics(this: That, params?: T.GetCrawlerMetricsRequest, options?: TransportRequestOptions): Promise<T.GetCrawlerMetricsResponse>;
    getCrawlerOverview(this: That, params: T.GetCrawlerOverviewRequest, options?: TransportRequestOptions): Promise<T.GetCrawlerOverviewResponse>;
    createCrawlerProcessCrawl(this: That, params: T.CreateCrawlerProcessCrawlRequest, options?: TransportRequestOptions): Promise<T.CreateCrawlerProcessCrawlResponse>;
    listCrawlerProcessCrawls(this: That, params: T.ListCrawlerProcessCrawlsRequest, options?: TransportRequestOptions): Promise<T.ListCrawlerProcessCrawlsResponse>;
    getCrawlerProcessCrawl(this: That, params: T.GetCrawlerProcessCrawlRequest, options?: TransportRequestOptions): Promise<T.GetCrawlerProcessCrawlResponse>;
    createCrawlerSitemap(this: That, params: T.CreateCrawlerSitemapRequest, options?: TransportRequestOptions): Promise<T.CreateCrawlerSitemapResponse>;
    putCrawlerSitemap(this: That, params: T.PutCrawlerSitemapRequest, options?: TransportRequestOptions): Promise<T.PutCrawlerSitemapResponse>;
    deleteCrawlerSitemap(this: That, params: T.DeleteCrawlerSitemapRequest, options?: TransportRequestOptions): Promise<T.DeleteCrawlerSitemapResponse>;
    getCrawlerUrlTracingResult(this: That, params: T.GetCrawlerUrlTracingResultRequest, options?: TransportRequestOptions): Promise<T.GetCrawlerUrlTracingResultResponse>;
    getCrawlerUrlValidationResult(this: That, params: T.GetCrawlerUrlValidationResultRequest, options?: TransportRequestOptions): Promise<T.GetCrawlerUrlValidationResultResponse>;
    getCrawlerDomainValidationResult(this: That, params: T.GetCrawlerDomainValidationResultRequest, options?: TransportRequestOptions): Promise<T.GetCrawlerDomainValidationResultResponse>;
    getCrawlerUserAgent(this: That, params?: T.GetCrawlerUserAgentRequest, options?: TransportRequestOptions): Promise<T.GetCrawlerUserAgentResponse>;
    listApiKeys(this: That, params?: T.ListApiKeysRequest, options?: TransportRequestOptions): Promise<T.ListApiKeysResponse>;
    createApiKey(this: That, params?: T.CreateApiKeyRequest, options?: TransportRequestOptions): Promise<T.CreateApiKeyResponse>;
    getApiKey(this: That, params: T.GetApiKeyRequest, options?: TransportRequestOptions): Promise<T.GetApiKeyResponse>;
    putApiKey(this: That, params: T.PutApiKeyRequest, options?: TransportRequestOptions): Promise<T.PutApiKeyResponse>;
    deleteApiKey(this: That, params: T.DeleteApiKeyRequest, options?: TransportRequestOptions): Promise<T.DeleteApiKeyResponse>;
    listCurations(this: That, params: T.ListCurationsRequest, options?: TransportRequestOptions): Promise<T.ListCurationsResponse>;
    createCuration(this: That, params: T.CreateCurationRequest, options?: TransportRequestOptions): Promise<T.CreateCurationResponse>;
    getCuration(this: That, params: T.GetCurationRequest, options?: TransportRequestOptions): Promise<T.GetCurationResponse>;
    putCuration(this: That, params: T.PutCurationRequest, options?: TransportRequestOptions): Promise<T.PutCurationResponse>;
    deleteCuration(this: That, params: T.DeleteCurationRequest, options?: TransportRequestOptions): Promise<T.DeleteCurationResponse>;
    getDocuments(this: That, params: T.GetDocumentsRequest, options?: TransportRequestOptions): Promise<T.GetDocumentsResponse>;
    indexDocuments(this: That, params: T.IndexDocumentsRequest, options?: TransportRequestOptions): Promise<T.IndexDocumentsResponse>;
    deleteDocuments(this: That, params: T.DeleteDocumentsRequest, options?: TransportRequestOptions): Promise<T.DeleteDocumentsResponse>;
    putDocuments(this: That, params: T.PutDocumentsRequest, options?: TransportRequestOptions): Promise<T.PutDocumentsResponse>;
    listDocuments(this: That, params: T.ListDocumentsRequest, options?: TransportRequestOptions): Promise<T.ListDocumentsResponse>;
    listEngines(this: That, params?: T.ListEnginesRequest, options?: TransportRequestOptions): Promise<T.ListEnginesResponse>;
    createEngine(this: That, params?: T.CreateEngineRequest, options?: TransportRequestOptions): Promise<T.CreateEngineResponse>;
    getEngine(this: That, params: T.GetEngineRequest, options?: TransportRequestOptions): Promise<T.GetEngineResponse>;
    deleteEngine(this: That, params: T.DeleteEngineRequest, options?: TransportRequestOptions): Promise<T.DeleteEngineResponse>;
    deleteMetaEngineSource(this: That, params: T.DeleteMetaEngineSourceRequest, options?: TransportRequestOptions): Promise<T.DeleteMetaEngineSourceResponse>;
    addMetaEngineSource(this: That, params: T.AddMetaEngineSourceRequest, options?: TransportRequestOptions): Promise<T.AddMetaEngineSourceResponse>;
    searchEsSearch_v0(this: That, params: T.SearchEsSearchV0Request, options?: TransportRequestOptions): Promise<T.SearchEsSearchV0Response>;
    searchEsSearch(this: That, params: T.SearchEsSearchRequest, options?: TransportRequestOptions): Promise<T.SearchEsSearchResponse>;
    getApiLogs(this: That, params: T.GetApiLogsRequest, options?: TransportRequestOptions): Promise<T.GetApiLogsResponse>;
    querySuggestion(this: That, params: T.QuerySuggestionRequest, options?: TransportRequestOptions): Promise<T.QuerySuggestionResponse>;
    getSchema(this: That, params: T.GetSchemaRequest, options?: TransportRequestOptions): Promise<T.GetSchemaResponse>;
    putSchema(this: That, params: T.PutSchemaRequest, options?: TransportRequestOptions): Promise<T.PutSchemaResponse>;
    search(this: That, params: T.SearchRequest, options?: TransportRequestOptions): Promise<T.SearchResponse>;
    multiSearch(this: That, params: T.MultiSearchRequest, options?: TransportRequestOptions): Promise<T.MultiSearchResponse>;
    search_explain_v0(this: That, params: T.SearchExplainV0Request, options?: TransportRequestOptions): Promise<T.SearchExplainV0Response>;
    search_explain(this: That, params: T.SearchExplainRequest, options?: TransportRequestOptions): Promise<T.SearchExplainResponse>;
    getSearchSettings(this: That, params: T.GetSearchSettingsRequest, options?: TransportRequestOptions): Promise<T.GetSearchSettingsResponse>;
    putSearchSettings(this: That, params: T.PutSearchSettingsRequest, options?: TransportRequestOptions): Promise<T.PutSearchSettingsResponse>;
    resetSearchSettings(this: That, params: T.ResetSearchSettingsRequest, options?: TransportRequestOptions): Promise<T.ResetSearchSettingsResponse>;
    listSynonymSets(this: That, params: T.ListSynonymSetsRequest, options?: TransportRequestOptions): Promise<T.ListSynonymSetsResponse>;
    createSynonymSet(this: That, params: T.CreateSynonymSetRequest, options?: TransportRequestOptions): Promise<T.CreateSynonymSetResponse>;
    getSynonymSet(this: That, params: T.GetSynonymSetRequest, options?: TransportRequestOptions): Promise<T.GetSynonymSetResponse>;
    putSynonymSet(this: That, params: T.PutSynonymSetRequest, options?: TransportRequestOptions): Promise<T.PutSynonymSetResponse>;
    deleteSynonymSet(this: That, params: T.DeleteSynonymSetRequest, options?: TransportRequestOptions): Promise<T.DeleteSynonymSetResponse>;
}
export {};
