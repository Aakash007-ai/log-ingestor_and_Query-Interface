"use strict";
/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
class API {
    async getAdaptiveRelevanceSettings(params, options) {
        const { engine_name, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: `/api/as/v0/engines/${engine_name}/adaptive_relevance/settings`,
            querystring
        }, options);
    }
    async putAdaptiveRelevanceSettings(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'PUT',
            path: `/api/as/v0/engines/${engine_name}/adaptive_relevance/settings`,
            querystring,
            body: body
        }, options);
    }
    async listAdaptiveRelevanceSuggestions(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v0/engines/${engine_name}/adaptive_relevance/suggestions`,
            querystring,
            body: body
        }, options);
    }
    async putAdaptiveRelevanceSuggestions(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'PUT',
            path: `/api/as/v0/engines/${engine_name}/adaptive_relevance/suggestions`,
            querystring,
            body: body
        }, options);
    }
    async getAdaptiveRelevanceSuggestions(params, options) {
        const { engine_name, search_suggestion_query, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v0/engines/${engine_name}/adaptive_relevance/suggestions/${search_suggestion_query}`,
            querystring,
            body: body
        }, options);
    }
    async refreshAdaptiveRelevanceUpdateProcess(params, options) {
        const { engine_name, adaptive_relevance_suggestion_type, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v0/engines/${engine_name}/adaptive_relevance/update_process/${adaptive_relevance_suggestion_type}/refresh`,
            querystring
        }, options);
    }
    async getTopClicksAnalytics(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/analytics/clicks`,
            querystring,
            body: body
        }, options);
    }
    async getCountAnalytics(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/analytics/counts`,
            querystring,
            body: body
        }, options);
    }
    async getTopQueriesAnalytics(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/analytics/queries`,
            querystring,
            body: body
        }, options);
    }
    async logClickthrough(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/click`,
            querystring,
            body: body
        }, options);
    }
    async getCrawlerUrlExtractionResult(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/crawler/extract_url`,
            querystring,
            body: body
        }, options);
    }
    async createCrawlerCrawlRequest(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/crawler/crawl_requests`,
            querystring,
            body: body
        }, options);
    }
    async listCrawlerCrawlRequests(params, options) {
        const { engine_name, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: `/api/as/v1/engines/${engine_name}/crawler/crawl_requests`,
            querystring
        }, options);
    }
    async getCrawlerCrawlRequest(params, options) {
        const { engine_name, crawl_request_id, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: `/api/as/v1/engines/${engine_name}/crawler/crawl_requests/${crawl_request_id}`,
            querystring
        }, options);
    }
    async getCrawlerActiveCrawlRequest(params, options) {
        const { engine_name, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: `/api/as/v1/engines/${engine_name}/crawler/crawl_requests/active`,
            querystring
        }, options);
    }
    async deleteCrawlerActiveCrawlRequest(params, options) {
        const { engine_name, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/crawler/crawl_requests/active/cancel`,
            querystring
        }, options);
    }
    async createCrawlerCrawlRule(params, options) {
        const { engine_name, domain_id, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/crawler/domains/${domain_id}/crawl_rules`,
            querystring,
            body: body
        }, options);
    }
    async putCrawlerCrawlRule(params, options) {
        const { engine_name, domain_id, crawl_rule_id, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'PUT',
            path: `/api/as/v1/engines/${engine_name}/crawler/domains/${domain_id}/crawl_rules/${crawl_rule_id}`,
            querystring,
            body: body
        }, options);
    }
    async deleteCrawlerCrawlRule(params, options) {
        const { engine_name, domain_id, crawl_rule_id, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'DELETE',
            path: `/api/as/v1/engines/${engine_name}/crawler/domains/${domain_id}/crawl_rules/${crawl_rule_id}`,
            querystring
        }, options);
    }
    async getCrawlerCrawlSchedule(params, options) {
        const { engine_name, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: `/api/as/v1/engines/${engine_name}/crawler/crawl_schedule`,
            querystring
        }, options);
    }
    async putCrawlerCrawlSchedule(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'PUT',
            path: `/api/as/v1/engines/${engine_name}/crawler/crawl_schedule`,
            querystring,
            body: body
        }, options);
    }
    async deleteCrawlerCrawlSchedule(params, options) {
        const { engine_name, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'DELETE',
            path: `/api/as/v1/engines/${engine_name}/crawler/crawl_schedule`,
            querystring
        }, options);
    }
    async getCrawlerProcessCrawlDeniedUrls(params, options) {
        const { engine_name, process_crawl_id, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: `/api/as/v1/engines/${engine_name}/crawler/process_crawls/${process_crawl_id}/denied_urls`,
            querystring
        }, options);
    }
    async listCrawlerDomains(params, options) {
        const { engine_name, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: `/api/as/v1/engines/${engine_name}/crawler/domains`,
            querystring
        }, options);
    }
    async createCrawlerDomain(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/crawler/domains`,
            querystring,
            body: body
        }, options);
    }
    async getCrawlerDomain(params, options) {
        const { engine_name, domain_id, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: `/api/as/v1/engines/${engine_name}/crawler/domains/${domain_id}`,
            querystring
        }, options);
    }
    async putCrawlerDomain(params, options) {
        const { engine_name, domain_id, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'PUT',
            path: `/api/as/v1/engines/${engine_name}/crawler/domains/${domain_id}`,
            querystring,
            body: body
        }, options);
    }
    async deleteCrawlerDomain(params, options) {
        const { engine_name, domain_id, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'DELETE',
            path: `/api/as/v1/engines/${engine_name}/crawler/domains/${domain_id}`,
            querystring
        }, options);
    }
    async createCrawlerEntryPoint(params, options) {
        const { engine_name, domain_id, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/crawler/domains/${domain_id}/entry_points`,
            querystring,
            body: body
        }, options);
    }
    async putCrawlerEntryPoint(params, options) {
        const { engine_name, domain_id, entry_point_id, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'PUT',
            path: `/api/as/v1/engines/${engine_name}/crawler/domains/${domain_id}/entry_points/${entry_point_id}`,
            querystring,
            body: body
        }, options);
    }
    async deleteCrawlerEntryPoint(params, options) {
        const { engine_name, domain_id, entry_point_id, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'DELETE',
            path: `/api/as/v1/engines/${engine_name}/crawler/domains/${domain_id}/entry_points/${entry_point_id}`,
            querystring
        }, options);
    }
    async getCrawlerMetrics(params, options) {
        return await this.transport.request({
            method: 'GET',
            path: '/api/as/v1/crawler/metrics'
        }, options);
    }
    async getCrawlerOverview(params, options) {
        const { engine_name, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: `/api/as/v1/engines/${engine_name}/crawler`,
            querystring
        }, options);
    }
    async createCrawlerProcessCrawl(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/crawler/process_crawls`,
            querystring,
            body: body
        }, options);
    }
    async listCrawlerProcessCrawls(params, options) {
        const { engine_name, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: `/api/as/v1/engines/${engine_name}/crawler/process_crawls`,
            querystring
        }, options);
    }
    async getCrawlerProcessCrawl(params, options) {
        const { engine_name, process_crawl_id, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: `/api/as/v1/engines/${engine_name}/crawler/process_crawls/${process_crawl_id}`,
            querystring
        }, options);
    }
    async createCrawlerSitemap(params, options) {
        const { engine_name, domain_id, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/crawler/domains/${domain_id}/sitemaps`,
            querystring,
            body: body
        }, options);
    }
    async putCrawlerSitemap(params, options) {
        const { engine_name, domain_id, sitemap_id, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'PUT',
            path: `/api/as/v1/engines/${engine_name}/crawler/domains/${domain_id}/sitemaps/${sitemap_id}`,
            querystring,
            body: body
        }, options);
    }
    async deleteCrawlerSitemap(params, options) {
        const { engine_name, domain_id, sitemap_id, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'DELETE',
            path: `/api/as/v1/engines/${engine_name}/crawler/domains/${domain_id}/sitemaps/${sitemap_id}`,
            querystring
        }, options);
    }
    async getCrawlerUrlTracingResult(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/crawler/trace_url`,
            querystring,
            body: body
        }, options);
    }
    async getCrawlerUrlValidationResult(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/crawler/validate_url`,
            querystring,
            body: body
        }, options);
    }
    async getCrawlerDomainValidationResult(params, options) {
        const { body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: '/api/as/v1/crawler/validate_url',
            querystring,
            body: body
        }, options);
    }
    async getCrawlerUserAgent(params, options) {
        return await this.transport.request({
            method: 'GET',
            path: '/api/as/v1/crawler/user_agent'
        }, options);
    }
    async listApiKeys(params, options) {
        const { ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: '/api/as/v1/credentials',
            querystring
        }, options);
    }
    async createApiKey(params, options) {
        const { body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: '/api/as/v1/credentials',
            querystring,
            body: body
        }, options);
    }
    async getApiKey(params, options) {
        const { api_key_name, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: `/api/as/v1/credentials/${api_key_name}`,
            querystring
        }, options);
    }
    async putApiKey(params, options) {
        const { api_key_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'PUT',
            path: `/api/as/v1/credentials/${api_key_name}`,
            querystring,
            body: body
        }, options);
    }
    async deleteApiKey(params, options) {
        const { api_key_name, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'DELETE',
            path: `/api/as/v1/credentials/${api_key_name}`,
            querystring
        }, options);
    }
    async listCurations(params, options) {
        const { engine_name, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: `/api/as/v1/engines/${engine_name}/curations`,
            querystring
        }, options);
    }
    async createCuration(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/curations`,
            querystring,
            body: body
        }, options);
    }
    async getCuration(params, options) {
        const { engine_name, curation_id, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: `/api/as/v1/engines/${engine_name}/curations/${curation_id}`,
            querystring
        }, options);
    }
    async putCuration(params, options) {
        const { engine_name, curation_id, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'PUT',
            path: `/api/as/v1/engines/${engine_name}/curations/${curation_id}`,
            querystring,
            body: body
        }, options);
    }
    async deleteCuration(params, options) {
        const { engine_name, curation_id, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'DELETE',
            path: `/api/as/v1/engines/${engine_name}/curations/${curation_id}`,
            querystring
        }, options);
    }
    async getDocuments(params, options) {
        const { engine_name, documentIds, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: `/api/as/v1/engines/${engine_name}/documents`,
            querystring,
            body: documentIds
        }, options);
    }
    async indexDocuments(params, options) {
        const { engine_name, documents, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/documents`,
            querystring,
            body: documents
        }, options);
    }
    async deleteDocuments(params, options) {
        const { engine_name, documentIds, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'DELETE',
            path: `/api/as/v1/engines/${engine_name}/documents`,
            querystring,
            body: documentIds
        }, options);
    }
    async putDocuments(params, options) {
        const { engine_name, documents, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'PATCH',
            path: `/api/as/v1/engines/${engine_name}/documents`,
            querystring,
            body: documents
        }, options);
    }
    async listDocuments(params, options) {
        const { engine_name, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: `/api/as/v1/engines/${engine_name}/documents/list`,
            querystring
        }, options);
    }
    async listEngines(params, options) {
        const { ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: '/api/as/v1/engines',
            querystring
        }, options);
    }
    async createEngine(params, options) {
        const { body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: '/api/as/v1/engines',
            querystring,
            body: body
        }, options);
    }
    async getEngine(params, options) {
        const { engine_name, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: `/api/as/v1/engines/${engine_name}`,
            querystring
        }, options);
    }
    async deleteEngine(params, options) {
        const { engine_name, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'DELETE',
            path: `/api/as/v1/engines/${engine_name}`,
            querystring
        }, options);
    }
    async deleteMetaEngineSource(params, options) {
        const { engine_name, sourceEngines, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'DELETE',
            path: `/api/as/v1/engines/${engine_name}/source_engines`,
            querystring,
            body: sourceEngines
        }, options);
    }
    async addMetaEngineSource(params, options) {
        const { engine_name, sourceEngines, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/source_engines`,
            querystring,
            body: sourceEngines
        }, options);
    }
    async searchEsSearch_v0(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v0/engines/${engine_name}/elasticsearch/_search`,
            querystring,
            body: body
        }, options);
    }
    async searchEsSearch(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/elasticsearch/_search`,
            querystring,
            body: body
        }, options);
    }
    async getApiLogs(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/logs/api`,
            querystring,
            body: body
        }, options);
    }
    async querySuggestion(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/query_suggestion`,
            querystring,
            body: body
        }, options);
    }
    async getSchema(params, options) {
        const { engine_name, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: `/api/as/v1/engines/${engine_name}/schema`,
            querystring
        }, options);
    }
    async putSchema(params, options) {
        const { engine_name, schema, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/schema`,
            querystring,
            body: schema
        }, options);
    }
    async search(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/search`,
            querystring,
            body: body
        }, options);
    }
    async multiSearch(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/multi_search`,
            querystring,
            body: body
        }, options);
    }
    async search_explain_v0(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v0/engines/${engine_name}/search_explain`,
            querystring,
            body: body
        }, options);
    }
    async search_explain(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/search_explain`,
            querystring,
            body: body
        }, options);
    }
    async getSearchSettings(params, options) {
        const { engine_name, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: `/api/as/v1/engines/${engine_name}/search_settings`,
            querystring
        }, options);
    }
    async putSearchSettings(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'PUT',
            path: `/api/as/v1/engines/${engine_name}/search_settings`,
            querystring,
            body: body
        }, options);
    }
    async resetSearchSettings(params, options) {
        const { engine_name, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/search_settings/reset`,
            querystring
        }, options);
    }
    async listSynonymSets(params, options) {
        const { engine_name, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: `/api/as/v1/engines/${engine_name}/synonyms`,
            querystring
        }, options);
    }
    async createSynonymSet(params, options) {
        const { engine_name, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'POST',
            path: `/api/as/v1/engines/${engine_name}/synonyms`,
            querystring,
            body: body
        }, options);
    }
    async getSynonymSet(params, options) {
        const { engine_name, synonym_set_id, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'GET',
            path: `/api/as/v1/engines/${engine_name}/synonyms/${synonym_set_id}`,
            querystring
        }, options);
    }
    async putSynonymSet(params, options) {
        const { engine_name, synonym_set_id, body, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'PUT',
            path: `/api/as/v1/engines/${engine_name}/synonyms/${synonym_set_id}`,
            querystring,
            body: body
        }, options);
    }
    async deleteSynonymSet(params, options) {
        const { engine_name, synonym_set_id, ...querystring } = params !== null && params !== void 0 ? params : {};
        return await this.transport.request({
            method: 'DELETE',
            path: `/api/as/v1/engines/${engine_name}/synonyms/${synonym_set_id}`,
            querystring
        }, options);
    }
}
exports.default = API;
//# sourceMappingURL=api.js.map